# This file configures the hello-world app which serves public web traffic.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: leo-backend-worker-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: leo-backend-worker-service
  template:
    metadata:
      labels:
        app: leo-backend-worker-service
    spec:
      containers:
      - name: leo-backend-worker-service-app
        # Replace $GCLOUD_PROJECT with your project ID
        image: us.gcr.io/leo-dataplatform/backend-flask-worker
        # This app listens on port 5000 for web traffic by default.
        ports:
        - containerPort: 5000
        env:
          - name: PORT
            value: "5000"
          - name: DATABASE_URI
            value: "postgres+psycopg2://leonardo:leonardo!@#@127.0.0.1:5432/qc_leonardo_db"
          - name: GCP_DATA_PLATFORM_PROJECT_ID
            value: "leo-etl-qc"
          - name: GCP_PROJECT_ID
            value: "leo-etl-qc"
          # CS Charts env vars
          - name: GCP_PUBSUB_SUBSCRIPTION
            value: "qc_leo_backend_work_task_sub"
          - name: GCP_PUBSUB_CS_CHART_TOPIC
            value: "qc_leo_backend_work_task"
          # CS crawl error status
          - name: GCP_PUBSUB_CS_ERROR_SUBSCRIPTION
            value: "qc_cs_error_webplatform"
          - name: GCP_PUBSUB_CS_ERROR_TOPIC
            value: "qc_cs_error"
          - name: GCP_PUBSUB_CS_ERROR_DELAY
            value: "300"
          # CS crawl progress
          - name: GCP_PUBSUB_CS_PROGRESS_SUBSCRIPTION
            value: "qc_cs_progress_webplatform"
          - name: "GCP_PUBSUB_REQUEST_TOPIC"
            value: "qc_requests"
          # Scheduler
          - name: GCP_PUBSUB_SCHEDULE_SUBSCRIPTION
            value: "qc_cs_schedule_webplatform"
          - name: GCP_PUBSUB_SCHEDULE_TOPIC
            value: "qc_cs_schedule"
          # Validation
          - name: GCP_PUBSUB_VALIDATE_COMPANY_DS_TOPIC
            value: "qc_company_ds_validation"
          - name: GCP_PUBSUB_VALIDATE_COMPANY_DS_SUBSCRIPTION
            value: "qc_company_ds"
          # Global worker delay time
          - name: GCP_BQ_TIMEOUT
            value: "60"
          - name: BQ_DATASET
            value: "qc_datamart"
          - name: BQ_DATA_WAREHOUSE_DATASET
            value: "qc_dwh"
          - name: LOGGER_NAME
            value: "leo-backend-service"
          - name: LOGGER
            value: "application"
          - name: ENABLE_CLOUD_LOGGING
            value: "0"
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: "/app/etc/google/auth/backend-service_account.json"

      # [START proxy_container]
      - image: gcr.io/cloudsql-docker/gce-proxy:1.16
        name: cloudsql-proxy
        command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                  "-instances=leo-webapp-qc:us-west1:leo-web-application-quality-control=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        volumeMounts:
          - name: cloudsql-oauth-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
          - name: ssl-certs
            mountPath: /etc/ssl/certs
          - name: cloudsql
            mountPath: /cloudsql
      # [END proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-oauth-credentials
          secret:
            secretName: cloudsql-oauth-credentials
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
        - name: cloudsql
          emptyDir: {}
      # [END volumes]

---
# The hello service provides a load-balancing proxy over the hello-app
# pods. By specifying the type as a 'LoadBalancer', Kubernetes Engine will
# create an external HTTP load balancer.
apiVersion: v1
kind: Service
metadata:
  name: leo-backend-worker-service
spec:
  type: NodePort
  selector:
    app: leo-backend-worker-service
  ports:
  - port: 80
    targetPort: 5000
